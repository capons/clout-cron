<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:batch="http://www.springframework.org/schema/batch" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/batch
		http://www.springframework.org/schema/batch/spring-batch-3.0.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/util 
		http://www.springframework.org/schema/util/spring-util-4.0.xsd">

	<!-- Using properties file to replace properties in xml configuration file -->
	<bean id="jobProperties" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="file:/opt/yellowpages-data/googleapi.properties" />
	</bean>	
	
    

	<batch:job id="yelpDataJob">	
		<!-- Decision tasklet to decide what store index to start at -->
	    <batch:step id="partitionStep" next="recordJobStep">
			<batch:partition step="businessDataStep" partitioner="rangePartitioner">
				<batch:handler grid-size="100" task-executor="taskExecutor" />
			</batch:partition>
	    </batch:step>
	    <batch:step id="recordJobStep">
	    	<batch:tasklet ref="recordStateTasklet" />
	    </batch:step>
	</batch:job>
	
	

	<batch:step id="businessDataStep">
		<batch:tasklet transaction-manager="transactionManager">
			<batch:chunk reader="yelpItemReader" processor="yelpItemProcessor" writer="yelpItemWriter" commit-interval="100" skip-limit="${cron.job.business.data.skip.limit}" processor-transactional="false">
    			<batch:skippable-exception-classes>
      				<batch:include class="com.clout.cron.batch.task.TaskException" />
    			</batch:skippable-exception-classes>
    		</batch:chunk>

		    <batch:listeners>
				<batch:listener ref="cronStepListener" />
				<batch:listener ref="cronWriteListener" />
		    </batch:listeners>			
			
		</batch:tasklet>
	</batch:step>
	
	<bean id="sicCategoryItemReader" class="org.springframework.batch.item.database.JdbcPagingItemReader"
		scope="step">
		<property name="dataSource" ref="dataSource" />
		<property name="queryProvider">
			<bean
				class="org.springframework.batch.item.database.support.SqlPagingQueryProviderFactoryBean">
				<property name="dataSource" ref="dataSource" />
				<property name="selectClause" value="select id, code_details, sub_category_code, main_category_code, code, sub_category_code_6, sub_category_code_8" />
				<property name="fromClause" value="from sic_codes" />
				<property name="whereClause" value="where id &gt;= :fromId and id &lt;= :toId" />
				<property name="sortKey" value="id" />
			</bean>
		</property>

		<!-- Inject via the ExecutionContext in rangePartitioner -->
		<property name="parameterValues">
			<map>
				<entry key="fromId" value="#{stepExecutionContext[fromId]}" />
				<entry key="toId" value="#{stepExecutionContext[toId]}" />
			</map>
		</property>
		<property name="pageSize" value="1000" />
		<property name="rowMapper">
			<bean class="com.clout.cron.batch.mapper.SicMapper" />
		</property>
	</bean>

	<bean id="naicsCategoryItemReader" class="org.springframework.batch.item.database.JdbcPagingItemReader"
		scope="step">
		<property name="dataSource" ref="dataSource" />
		<property name="queryProvider">
			<bean
				class="org.springframework.batch.item.database.support.SqlPagingQueryProviderFactoryBean">
				<property name="dataSource" ref="dataSource" />
				<property name="selectClause" value="select id, code_details, sub_category_code, main_category_code, code" />
				<property name="fromClause" value="from naics_codes" />
				<property name="whereClause" value="where id &gt;= :fromId and id &lt;= :toId" />
				<property name="sortKey" value="id" />
			</bean>
		</property>
		<!-- Inject via the ExecutionContext in rangePartitioner -->
		<property name="parameterValues">
			<map>
				<entry key="fromId" value="#{stepExecutionContext[fromId]}" />
				<entry key="toId" value="#{stepExecutionContext[toId]}" />
			</map>
		</property>
		<property name="pageSize" value="1000" />
		<property name="rowMapper">
			<bean class="com.clout.cron.batch.mapper.NaicsMapper" />
		</property>
	</bean>
	

	<!--  might need this to upload business specific data to s3 bucket specific to business data -->
	<bean id="businessDataS3Info" class="com.clout.cron.batch.metadata.S3Info">
		<property name="bucketName" value="${s3.bucket.name}" />
		<property name="s3Host" value="${s3.host}"/>
	</bean>


	

  <bean id="insertStoreItemWriter"
	class="org.springframework.batch.item.database.JdbcBatchItemWriter">
	<property name="dataSource" ref="dataSource" />
	<property name="sql">
	  <value>
            <![CDATA[       
            	INSERT INTO stores_scrapper (id, phone_number, longitude, latitude, website, name, address_line_1, address_line_2, city, state, zipcode, _country_code, key_words, public_store_key, clout_id, start_date, _entered_by, last_updated, _last_updated_by, is_franchise, price_range, star_rating, _primary_contact_id, online_only, status, has_multiple_locations, _state_id, email_address,_store_owner_id, logo_url, slogan, small_cover_image, large_cover_image, description, date_entered, full_address, category_level_2_id, category_id, category)
            	VALUES (:storeId, :phoneNumber, :longitude, :latitude, :website, :name, :addressLine1, :addressLine2, :city, :state, :zipcode, 'USA', :keyWords, :publicStoreKey, 0, now(), 1, now(), 1, 'N', 0, 0, 1, 'N', 'active', 'N', 5, '', 0, '', '', '', '', '', now(), :fullAddress, :categoryLevel2Id, :categoryId, :category);
            ]]>
	  </value>
	</property>
	<!-- It will take care matching between object property and sql name parameter -->
	<property name="itemSqlParameterSourceProvider">
		<bean
		class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
	</property>
  </bean>

</beans>