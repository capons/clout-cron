<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:batch="http://www.springframework.org/schema/batch" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/batch
		http://www.springframework.org/schema/batch/spring-batch-3.0.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/util 
		http://www.springframework.org/schema/util/spring-util-4.0.xsd">

	<util:list id="naicsCategory" value-type="com.clout.cron.batch.model.Naics">
	</util:list>
	
	<util:map id="categoryLevel2Mapping" map-class="java.util.HashMap">
    </util:map>
 
 	<util:map id="categoryLevel2ToNaicsMapping" map-class="java.util.HashMap">
    </util:map>   
    

	<batch:job id="businessDataJob">	
		<!-- Decision tasklet to decide what store index to start at -->
	    <batch:step id="partitionStep" next="recordJobStep">
			<batch:partition step="businessDataStep" partitioner="rangePartitioner">
				<batch:handler grid-size="100" task-executor="taskExecutor" />
			</batch:partition>
	    </batch:step>
	    <batch:step id="recordJobStep">
	    	<batch:tasklet ref="recordStateTasklet" />
	    </batch:step>
	</batch:job>
	
	

	<batch:step id="businessDataStep">
		<batch:tasklet>
			<batch:chunk reader="transactionPagingItemReader" processor="businessDataItemProcessor" writer="businessDataItemWriter" commit-interval="500" skip-limit="${cron.job.business.data.skip.limit}">
    			<batch:skippable-exception-classes>
      				<batch:include class="com.clout.cron.batch.task.TaskException" />
    			</batch:skippable-exception-classes>
    		</batch:chunk>

		    <batch:listeners>
				<batch:listener ref="cronStepListener" />
				<batch:listener ref="cronWriteListener" />
		    </batch:listeners>			
			
		</batch:tasklet>
	</batch:step>
	
	<bean id="sicCategoryItemReader" class="org.springframework.batch.item.database.JdbcPagingItemReader"
		scope="step">
		<property name="dataSource" ref="dataSource" />
		<property name="queryProvider">
			<bean
				class="org.springframework.batch.item.database.support.SqlPagingQueryProviderFactoryBean">
				<property name="dataSource" ref="dataSource" />
				<property name="selectClause" value="select id, code_details, sub_category_code, main_category_code, code, sub_category_code_6, sub_category_code_8" />
				<property name="fromClause" value="from sic_codes" />
				<property name="whereClause" value="where id &gt;= :fromId and id &lt;= :toId" />
				<property name="sortKey" value="id" />
			</bean>
		</property>

		<!-- Inject via the ExecutionContext in rangePartitioner -->
		<property name="parameterValues">
			<map>
				<entry key="fromId" value="#{stepExecutionContext[fromId]}" />
				<entry key="toId" value="#{stepExecutionContext[toId]}" />
			</map>
		</property>
		<property name="pageSize" value="1000" />
		<property name="rowMapper">
			<bean class="com.clout.cron.batch.mapper.SicMapper" />
		</property>
	</bean>

	<bean id="naicsCategoryItemReader" class="org.springframework.batch.item.database.JdbcPagingItemReader"
		scope="step">
		<property name="dataSource" ref="dataSource" />
		<property name="queryProvider">
			<bean
				class="org.springframework.batch.item.database.support.SqlPagingQueryProviderFactoryBean">
				<property name="dataSource" ref="dataSource" />
				<property name="selectClause" value="select id, code_details, sub_category_code, main_category_code, code" />
				<property name="fromClause" value="from naics_codes" />
				<property name="whereClause" value="where id &gt;= :fromId and id &lt;= :toId" />
				<property name="sortKey" value="id" />
			</bean>
		</property>
		<!-- Inject via the ExecutionContext in rangePartitioner -->
		<property name="parameterValues">
			<map>
				<entry key="fromId" value="#{stepExecutionContext[fromId]}" />
				<entry key="toId" value="#{stepExecutionContext[toId]}" />
			</map>
		</property>
		<property name="pageSize" value="1000" />
		<property name="rowMapper">
			<bean class="com.clout.cron.batch.mapper.NaicsMapper" />
		</property>
	</bean>
	


	<!-- Business data is collected via transaction id  -->
	<bean id="transactionPagingItemReader" class="org.springframework.batch.item.database.JdbcPagingItemReader"
		scope="step">
		<property name="dataSource" ref="dataSource" />
		<property name="queryProvider">
			<bean
				class="org.springframework.batch.item.database.support.SqlPagingQueryProviderFactoryBean">
				<property name="dataSource" ref="dataSource" />
				<property name="selectClause" value="select id as transaction_id" />
				<property name="fromClause" value="from clout_v1_3cron.transaction" />
				<property name="whereClause" value="where id &gt;= :fromId and id &lt;= :toId" />
				<property name="sortKey" value="transaction_id" />
			</bean>
		</property>
		<!-- Inject via the ExecutionContext in rangePartitioner -->
		<property name="parameterValues">
			<map>
				<entry key="fromId" value="#{stepExecutionContext[fromId]}" />
				<entry key="toId" value="#{stepExecutionContext[toId]}" />
			</map>
		</property>
		<property name="pageSize" value="1000" />
		<property name="rowMapper">
			<bean class="com.clout.cron.batch.mapper.StoreMapper" />
		</property>
	</bean>

	<!--  might need this to upload business specific data to s3 bucket specific to business data -->
	<bean id="businessDataS3Info" class="com.clout.cron.batch.metadata.S3Info">
		<property name="bucketName" value="${s3.bucket.name}" />
		<property name="s3Host" value="${s3.host}"/>
	</bean>


	

  <bean id="insertStoreItemWriter"
	class="org.springframework.batch.item.database.JdbcBatchItemWriter">
	<property name="dataSource" ref="dataSource" />
	<property name="sql">
	  <value>
            <![CDATA[       
            	INSERT INTO stores_scrapper (id, longitude, latitude, name, address_line_1, address_line_2, city, state, zipcode, _country_code, key_words, public_store_key)
            	VALUES (:storeId, :longitude, :latitude, :name, :addressLine1, :addressLine2, :city, :state, :zipcode, :countryCode, :keyWords, :publicStoreKey);
            ]]>
	  </value>
	</property>
	<!-- It will take care matching between object property and sql name parameter -->
	<property name="itemSqlParameterSourceProvider">
		<bean
		class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
	</property>
  </bean>



	<!--  Update from geolocation and google places -->
  <bean id="storeUpdateItemWriter"
	class="org.springframework.batch.item.database.JdbcBatchItemWriter">
	<property name="dataSource" ref="dataSource" />
	<property name="sql">
	  <value>
            <![CDATA[       
            	UPDATE stores_scraper SET `longitude` = :longitude, `latitude` = :latitude, logo_url = :logoUrl, slogan = :slogan, small_cover_image = :smallCoverImage, large_cover_image = :largeCoverImage, description = :description WHERE `id` = :storeId; 
            ]]>
	  </value>
	</property>
	<!-- It will take care matching between object property and sql name parameter -->
	<property name="itemSqlParameterSourceProvider">
		<bean
		class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
	</property>
  </bean>

</beans>